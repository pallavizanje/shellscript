-- adaptive_threshold_logic.sql

-- Variables expected to be passed via psql: 
-- :feed_def_key
-- :action (can be 'DELETE_OLD_DB', 'INSERT_NEW_FROM_SOURCE', 'COUNT_EXISTING_LOGS', 'SELECT_LOG_RECORDS', 'GET_WINDOW_THRESHOLD')

-- Action dispatcher
\if :action = 'DELETE_OLD_DB'
  DELETE FROM t_dqp_adaptive_threshold_log 
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db';

\elif :action = 'INSERT_NEW_FROM_SOURCE'
  WITH limit_value AS (
    SELECT window_size FROM t_dqp_feed_row_thrshld WHERE feed_def_key = :'feed_def_key'
  )
  INSERT INTO t_dqp_adaptive_threshold_log (
    src_feed_def_key, context_id, dataset_name, bussiness_date, feed_name, record_count
  )
  SELECT 
    frt.feed_def_key,
    'CTX_' || frt.feed_def_key, -- context_id
    'dataset',
    frt.bussiness_date,
    'feedName',
    CAST(COALESCE(fvm.metric_val1, '0') AS BIGINT)
  FROM t_dqp_feed_row_thrshld frt
  JOIN t_dqp_feed_vldn_metrics fvm 
    ON frt.feed_def_key = fvm.feed_inst_key 
   AND frt.feed_def_key = :'feed_def_key'
  ORDER BY fvm.bussiness_date DESC
  LIMIT (SELECT window_size FROM limit_value);

\elif :action = 'COUNT_EXISTING_LOGS'
  SELECT COUNT(*) 
  FROM t_dqp_adaptive_threshold_log 
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db';

\elif :action = 'SELECT_LOG_RECORDS'
  SELECT 
    src_feed_def_key,
    bussiness_date,
    record_count,
    feed_name,
    iqr_lower_threshold,
    iqr_upper_threshold,
    zscore,
    gmm_lower_threshold,
    gmm_upper_threshold,
    iqr_outlier,
    zscore_outlier,
    if_outlier,
    gmm_outlier,
    anomaly_percentage,
    last_updated_on
  FROM t_dqp_adaptive_threshold_log
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db'
  ORDER BY bussiness_date DESC;

\elif :action = 'GET_WINDOW_THRESHOLD'
  SELECT window_size, row_thrshld_lower, row_thrshld_upper 
  FROM t_dqp_feed_row_thrshld
  WHERE feed_def_key = :'feed_def_key';

\else
  \echo 'Unknown action passed to SQL script'
\endif
