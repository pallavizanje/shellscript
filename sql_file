-- adaptive_threshold_logic.sql

-- Action dispatcher

\if :action = 'get_feed_keys'
  SELECT DISTINCT feed_def_key FROM t_dqp_feed_row_thrshld;

\elif :action = 'delete_old'
  DELETE FROM t_dqp_adaptive_threshold_log 
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db';

\elif :action = 'insert_new'
  WITH limit_value AS (
    SELECT window_size FROM t_dqp_feed_row_thrshld WHERE feed_def_key = :'feed_def_key'
  )
  INSERT INTO t_dqp_adaptive_threshold_log (
    src_feed_def_key, context_id, dataset_name, bussiness_date, feed_name, record_count, source_type
  )
  SELECT 
    frt.feed_def_key,
    'CTX_' || frt.feed_def_key,
    'dataset',
    frt.bussiness_date,
    'feedName',
    CAST(COALESCE(fvm.metric_val1, '0') AS BIGINT),
    'db'
  FROM t_dqp_feed_row_thrshld frt
  JOIN t_dqp_feed_vldn_metrics fvm 
    ON frt.feed_def_key = fvm.feed_inst_key 
   AND frt.feed_def_key = :'feed_def_key'
  ORDER BY fvm.bussiness_date DESC
  LIMIT (SELECT window_size FROM limit_value);

\elif :action = 'count_log'
  SELECT COUNT(*) 
  FROM t_dqp_adaptive_threshold_log 
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db';

\elif :action = 'select_log_for_api'
  SELECT 
    src_feed_def_key,
    bussiness_date,
    record_count,
    feed_name,
    iqr_lower_threshold,
    iqr_upper_threshold,
    zscore,
    gmm_lower_threshold,
    gmm_upper_threshold,
    iqr_outlier,
    zscore_outlier,
    if_outlier,
    gmm_outlier,
    anomaly_percentage,
    last_updated_on
  FROM t_dqp_adaptive_threshold_log
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db'
  ORDER BY bussiness_date DESC;

\elif :action = 'get_window_and_log_count'
  SELECT 
    (SELECT window_size FROM t_dqp_feed_row_thrshld WHERE feed_def_key = :'feed_def_key'),
    (SELECT COUNT(*) FROM t_dqp_adaptive_threshold_log WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db');

\elif :action = 'get_thresholds'
  SELECT row_thrshld_lower, row_thrshld_upper, weekend_file_expected
  FROM t_dqp_feed_row_thrshld
  WHERE feed_def_key = :'feed_def_key';

\elif :action = 'get_base_info'
  SELECT 
    bussiness_date,
    record_count::TEXT,
    feed_name
  FROM t_dqp_adaptive_threshold_log
  WHERE src_feed_def_key = :'feed_def_key' AND source_type = 'db'
  ORDER BY last_updated_on DESC
  LIMIT 1;

\elif :action = 'insert_ml_response'
  INSERT INTO t_dqp_adaptive_threshold_log (
    src_feed_def_key,
    bussiness_date,
    feed_name,
    record_count,
    iqr_lower_threshold,
    iqr_upper_threshold,
    zscore,
    gmm_lower_threshold,
    gmm_upper_threshold,
    iqr_outlier,
    zscore_outlier,
    if_outlier,
    gmm_outlier,
    anomaly_percentage,
    last_updated_on,
    source_type
  ) VALUES (
    :'src_feed_def_key',
    :'bussiness_date',
    :'feed_name',
    :'record_count',
    :'iqr_lower_threshold',
    :'iqr_upper_threshold',
    :'zscore',
    :'gmm_lower_threshold',
    :'gmm_upper_threshold',
    :'iqr_outlier',
    :'zscore_outlier',
    :'if_outlier',
    :'gmm_outlier',
    :'anomaly_percentage',
    NOW(),
    'ml'
  );

\else
  \echo 'Unknown action passed to SQL script'
\endif
